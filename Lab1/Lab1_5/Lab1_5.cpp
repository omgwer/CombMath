#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;
vector<vector<size_t>> GetCombination(size_t digitsCount, size_t maxDigit);
size_t VectorSumma(vector<size_t> &vector);
/* 1.5. [# 15]
	–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ—Ä–æ–∂–¥–µ–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ ùëõ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª {ùëß_1, ùëß_2, ‚Ä¶, ùëß_ùëò \}, ùëß_1+ùëß_2+‚Ä¶+ùëß_ùëò=ùëõ.
	–ó–¥–µ—Å—å —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ—Ä—è–¥–æ–∫ —á–∏—Å–µ–ª ùëß_ùëñ –∏ ùëß_ùëñ>0.
–ü–æ–Ω–∏–º–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–∞–∫: –≤–≤–æ–¥–∏—à—å —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 5)
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–¥–∞—Ç—å –≤—Å–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏, —Å—É–º–º–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω–∞ 5
–ü—Ä–∏–º–µ—Ä: –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä—É—é –ø–∏—Å–∞–ª–∏ –Ω–∞ –¥–æ—Å–∫–µ. –ü—Ä–æ —è–±–ª–æ–∫–∏, –∫–∞–∫–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏—Ö –º–æ–∂–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å
*/
int main(int argc, char *argv[])
{
    constexpr unsigned short vectorSize = 5;

    // –¥–æ–±–∞–≤–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—á–µ—Ç–∞–Ω–∏—è  ( –Ω–µ –Ω–∞—Ä–∞–π—è–Ω–∞)  
    //    6 slide
    vector<vector<size_t>> test = GetCombination(2, 4);
    return 0;
}

/**  
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ, –¥–ª—è {3,5} - –ø–∞—Ä—ã –±—É–¥—É—Ç 123 124 125 134 etc
 * @param digitsCount - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏
 * @param maxDigit - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
 */
vector<vector<size_t>> GetCombination(const size_t digitsCount, const size_t maxDigit)
{
    vector<size_t> combination(digitsCount + 1, 0);
    vector<vector<size_t>> combinationResult;
    combination[0] = -1;
    for (size_t i = 1; i <= digitsCount; i++)
    {
        combination[i] = i;
    }
    size_t m = 1;
    while (m != 0)
    {
        combinationResult.push_back(combination);
        copy(combination.begin() + 1, combination.end(), std::ostream_iterator<size_t>(std::cout, " "));
        cout << endl;
        m = digitsCount;
        while (combination[m] == maxDigit - digitsCount + m)
            m--;

        combination[m] = combination[m] + 1;

        for (size_t i = m + 1; i <= digitsCount; i++)
        {
            combination[i] = combination[i - 1] + 1;
        }
    }
    return combinationResult;
}

size_t VectorSumma(vector<size_t> &vector)
{
    size_t vectorSum = 0;

    // —Ç—É—Ç –µ–¥–∏–Ω–∏—Ü–∞ —Ç–∞–∫ –∫–∞–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç 0 —ç–ª–µ–º–µ–Ω—Ç –≤–µ–∫—Ç–æ—Ä–∞, —Ç–∞–º –º—É—Å–æ—Ä
    for (size_t i = 1; i < vector.size(); i++)
        vectorSum += vector[i];
    return vectorSum;
}
