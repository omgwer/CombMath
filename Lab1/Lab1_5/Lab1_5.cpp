#include <algorithm>
#include <iostream>
#include <vector>

size_t GeneratePermutationWithNarayanaAlgorithm(unsigned short vectorSize);

/* 1.5. [# 15]
	–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ—Ä–æ–∂–¥–µ–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ ùëõ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª {ùëß_1, ùëß_2, ‚Ä¶, ùëß_ùëò \}, ùëß_1+ùëß_2+‚Ä¶+ùëß_ùëò=ùëõ.
	–ó–¥–µ—Å—å —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ—Ä—è–¥–æ–∫ —á–∏—Å–µ–ª ùëß_ùëñ –∏ ùëß_ùëñ>0. */
int main(int argc, char *argv[])
{
    constexpr unsigned short vectorSize = 5;
   
   // –¥–æ–±–∞–≤–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—á–µ—Ç–∞–Ω–∏—è  ( –Ω–µ –Ω–∞—Ä–∞–π—è–Ω–∞)  
    //    6 slide
    
    GeneratePermutationWithNarayanaAlgorithm(vectorSize);
    return 0;
}

size_t GeneratePermutationWithNarayanaAlgorithm(const unsigned short vectorSize)
{
    size_t iterablesCount = 0;
    std::vector<size_t> result;
    for (int i = 1; i <= vectorSize; i++)
        result.push_back(i);
    std::sort(result.begin(), result.end());
    do
    {
        std::cout << "Result vector: ";
        copy(result.begin(), result.end(), std::ostream_iterator<size_t>(std::cout, " "));
        iterablesCount++;
        std::cout << std::endl;
    }
    while (std::next_permutation(result.begin(), result.end()));
    return iterablesCount;
}
