#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;
vector<vector<size_t>> GetCombinations(size_t digitsCount, size_t maxDigit);
size_t VectorSumma(vector<size_t> &vector);
vector<size_t> GetSumm(size_t arraySizeForCombinations, size_t numbersCountForDelemiter, vector<size_t> &combinations);
vector<vector<size_t>> GetSummVector(size_t arraySizeForCombinations, size_t numbersCountForDelemiter,
                                     vector<vector<size_t>> &combinations);
void PrintVector(vector<vector<size_t>> &summVector);
/* 1.5. [# 15]
	–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ—Ä–æ–∂–¥–µ–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ ùëõ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª {ùëß_1, ùëß_2, ‚Ä¶, ùëß_ùëò \}, ùëß_1+ùëß_2+‚Ä¶+ùëß_ùëò=ùëõ.
	–ó–¥–µ—Å—å —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ—Ä—è–¥–æ–∫ —á–∏—Å–µ–ª ùëß_ùëñ –∏ ùëß_ùëñ>0.
–ü–æ–Ω–∏–º–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–∞–∫: –≤–≤–æ–¥–∏—à—å —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä 5)
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–¥–∞—Ç—å –≤—Å–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏, —Å—É–º–º–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω–∞ 5
–ü—Ä–∏–º–µ—Ä: –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä—É—é –ø–∏—Å–∞–ª–∏ –Ω–∞ –¥–æ—Å–∫–µ. –ü—Ä–æ —è–±–ª–æ–∫–∏, –∫–∞–∫–∏–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏—Ö –º–æ–∂–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å
*/
int main(int argc, char *argv[])
{
    // —á–∏—Å–ª–æ –¥–ª—è —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è
    size_t numberForComposition = 3;
    cout << "For number is :" << numberForComposition << endl;
    cout << numberForComposition << endl;
    for (size_t i = 2; i < numberForComposition; i++)
    {
        // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º
        size_t numbersCountForDelemiter = i; // —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –º—ã –æ—Ç–ª–æ–∂–∏–ª–∏, –Ω—É–∂–Ω–æ –ø–æ—Ç–æ–º –∑–∞–ø–æ–º–Ω–∏—Ç—å
        size_t arrayDelemiters = numbersCountForDelemiter - 1;
        // —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        size_t arraySizeForCombinations = numberForComposition - numbersCountForDelemiter + arrayDelemiters;
        vector<vector<size_t>> combinations = GetCombinations(arrayDelemiters, arraySizeForCombinations);
        vector<vector<size_t>> summVector = GetSummVector(arraySizeForCombinations, numbersCountForDelemiter,
                                                          combinations);
        PrintVector(summVector);
    }
    for (size_t i = 0; i < numberForComposition; i++)
        cout << "1 ";
    cout << endl;
    return 0;
}

/**  
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ, –¥–ª—è {3,5} - –ø–∞—Ä—ã –±—É–¥—É—Ç 123 124 125 134 etc
 * @param digitsCount - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏
 * @param maxDigit - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
 */
vector<vector<size_t>> GetCombinations(const size_t digitsCount, const size_t maxDigit)
{
    vector<size_t> combination(digitsCount + 1, 0);
    vector<vector<size_t>> combinationResult;
    combination[0] = -1;
    for (size_t i = 1; i <= digitsCount; i++)
    {
        combination[i] = i;
    }
    size_t m = 1;
    while (m != 0)
    {
        auto tempVar = combination;
        tempVar.erase(tempVar.begin());
        combinationResult.push_back(tempVar);
        //copy(combination.begin() + 1, combination.end(), std::ostream_iterator<size_t>(std::cout, " "));
        //cout << endl;
        m = digitsCount;
        while (combination[m] == maxDigit - digitsCount + m)
            m--;

        combination[m] = combination[m] + 1;

        for (size_t i = m + 1; i <= digitsCount; i++)
        {
            combination[i] = combination[i - 1] + 1;
        }
    }
    return combinationResult;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å—É–º–º—ã —á–∏—Å–ª–∞
 */
vector<size_t> GetSumm(size_t arraySizeForCombinations, size_t numbersCountForDelemiter, vector<size_t> &combinations)
{
    vector<size_t> summ;
    //–¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–ª–∞–≥–∞–µ–º—ã–µ
    for (size_t i = 0; i < numbersCountForDelemiter; i++)
    {
        size_t tmp = 0;
        if (i + 1 == numbersCountForDelemiter) // —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        {
            size_t tmptest = combinations[i - 1]; // –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ combinatoins
            tmp = arraySizeForCombinations - tmptest;
            // –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = —Ä–∞–∑–º–µ—Ä–ú–∞—Å—Å–∏–≤–∞ -1 - –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞—á–µ–Ω–∏–µ –≤ –∫–æ–º–±–∞–Ω–∏—Ü–∏–∏.
        }
        else
        {
            tmp += combinations[i]; // –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            // –Ω—É–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É —ç–ª–µ–º–µ–Ω—Ç–∞, –æ–±—Ö–æ–¥–∏–º –ø—Ä—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            // for (size_t j = i; j > 0; j--) // –≤—Ä–æ–¥–µ –∫–∞–∫ –Ω–µ –Ω–∞–¥–æ, –º—ã –¥–æ–ª–∂–Ω—ã –≤—ã—á–∏—Ç–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π—ç —ç–ª–µ–º–µ–Ω—Ç
            // {
            //     tmp -= combinations[i - 1]; // —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤—ã—á–µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ
            // }
            if (i > 0)
                tmp -= combinations[i - 1];
            
            tmp--; // –≤—ã—á–∏—Ç–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É —É –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ            
        }
        tmp++; // –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ –µ–¥–∏–Ω–∏—Ü–µ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Ö –±—Ä–∞–ª–∏ –¥–æ —ç—Ç–æ–≥–æ
        summ.push_back(tmp);
    }
    return summ;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É–º–º —á–∏—Å–ª–∞ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–ª–∞–≥–∞–µ–º—ã—Ö
 */
vector<vector<size_t>> GetSummVector(size_t arraySizeForCombinations, size_t numbersCountForDelemiter,
                                     vector<vector<size_t>> &combinations)
{
    vector<vector<size_t>> summVector;
    vector<size_t> tmpSum;
    for (size_t i = 0; i < combinations.size(); i++) // –∏—â–µ–º –≤—Å–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—É–º–º—ã 
    {
        tmpSum = GetSumm(arraySizeForCombinations, numbersCountForDelemiter, combinations.at(i));
        summVector.push_back(tmpSum);
    }
    return summVector;
}

void PrintVector(vector<vector<size_t>> &summVector)
{
    for (size_t i = 0; i < summVector.size(); i++)
    {
        copy(summVector[i].begin(), summVector[i].end(), std::ostream_iterator<size_t>(std::cout, " "));
        cout << endl;
    }
}
