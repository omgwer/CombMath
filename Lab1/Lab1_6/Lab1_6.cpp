#include <algorithm>
#include <fstream>
#include <iostream>
#include <vector>
using namespace std;

struct Command
{
    size_t numberOfThings; // –∫–æ–ª-–≤–æ –≤–µ—â–µ–π
    size_t countOfThings; // –≤–µ—Å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä—é–∫–∑–∞–∫–∞)
    size_t priceOfThings; // —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤
};

struct Thing
{
    size_t weight; // –≤–µ—Å
    size_t price; // —Ü–µ–Ω–∞ 
};

void ParseCommandFile(Command &command, vector<Thing> &thing);
void GetResultItems(vector<vector<size_t>>& array, size_t k, size_t s, vector<Thing>& w, vector<Thing>& resultArray);
/* 1.6. [# 35] –ó–∞–¥–∞—á–∞ –æ–± —É–∫–ª–∞–¥–∫–µ —Ä—é–∫–∑–∞–∫–∞.
	–ï—Å—Ç—å ùëõ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ö–∞–∂–¥—ã–π –ø—Ä–µ–¥–º–µ—Ç —Å –Ω–æ–º–µ—Ä–æ–º ùëñ, –≥–¥–µ ùëñ=1,‚Ä¶,ùëõ, –∏–º–µ–µ—Ç –∑–∞–¥–∞–Ω–Ω—ã–π –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –≤–µ—Å ùë§_ùëñ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å ùëê_ùëñ.
	–ù—É–∂–Ω–æ —É–ª–æ–∂–∏—Ç—å —Ä—é–∫–∑–∞–∫ —Ç–∞–∫, —á—Ç–æ–±—ã –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –Ω–µ–º –±—ã–ª–∞ –Ω–µ –º–µ–Ω–µ–µ ùëÜ, –∞ –≤–µ—Å –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª –∑–∞–¥–∞–Ω–Ω–æ–≥–æ ùëá.
	–í—Ö–æ–¥. –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Ç—Ä–∏ —á–∏—Å–ª–∞
	    ùëõ - –∫–æ–ª-–≤–æ –≤–µ—â–µ–π,
	    ùëá - –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ä—é–∫–∑–∞–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤,
	    ùëÜ - —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤,
	    –≤ —Å–ª–µ–¥—É—é—â–∏—Ö ùëõ —Å—Ç—Ä–æ—á–∫–∞—Ö ‚Äì –ø–æ –¥–≤–∞ —á–∏—Å–ª–∞ (–≤–µ—Å ùë§_ùëñ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å ùëê_ùëñ)
	–í—ã—Ö–æ–¥. –í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ ‚Äì –≤–µ—Å –ø–æ–ª—É—á–∏–≤—à–µ–≥–æ—Å—è —Ä—é–∫–∑–∞–∫–∞,
	–≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ—á–∫–µ —Å—Ç—Ä–æ–∫–∞ –∏–∑ 0 –∏ 1 –ø–æ—è—Å–Ω—è—é—â–∏—Ö –∫–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –±–µ—Ä—É—Ç—Å—è, –∞ –∫–∞–∫–∏–µ ‚Äì –Ω–µ –±–µ—Ä—É—Ç—Å—è.
 */
int main(int argc, char *argv[])
{
    Command command;
    vector<Thing> thingVector;
    ParseCommandFile(command, thingVector);

    // –¥–æ–±–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É, —Ç–∞–∫ –∫–∞–∫ –¥–ª—è 0 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–µ–∑–¥–µ –±—É–¥–µ—Ç 0
    vector<vector<size_t>> A(command.numberOfThings + 1, vector<size_t>(command.countOfThings + 1, 0));

    for (size_t i = 0; i < command.countOfThings; i++) // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω—É–ª–µ–≤—É—é —Å—Ç—Ä–æ—á–∫—É
        A[0][i] = 0;
    // –∑–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
    for (size_t s = 1; s < command.numberOfThings + 1; s++) // –∫–æ–ª-–≤–æ –≤–µ—â–µ–π
    {
        //–∑–∞–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω —Ä—è–¥ —Ç–∞–±–ª–∏—Ü—ã
        for (size_t n = 0; n < command.countOfThings + 1; n++) // —Ä–∞–∑–º–µ—Ä —Ä—é–∫–∑–∞–∫–∞
        {
            A[s][n] = A[s - 1][n]; // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —ç—Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–∏
            size_t currentThingWeight = thingVector[s].weight;
            size_t currentThingPrice =  thingVector[s].price;

            bool first = n >= currentThingWeight; // —Ä–∞–∑–º–µ—Ä —Ä—é–∫–∞–∑–∞ –≤ —ç—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –±–æ–ª—å—à–µ —á–µ–º –≤–µ—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–µ—â–∏
            bool second = false;
            
            if (first) 
            {
                size_t firstArgument = A[s - 1][n - currentThingWeight]; // 
                size_t secondArgument = A[s][n];  // —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ç–∞–±–ª–∏—Ü—ã
                second = (firstArgument + currentThingPrice > secondArgument); 
            }   
            if (first && second)
            {
                A[s][n] = A[s - 1][n - currentThingWeight] + currentThingPrice;
            }
        }
    }
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ä—é–∫–∑–∞–∫–∞
    vector<Thing> resultArray;
    GetResultItems(A,command.numberOfThings,command.countOfThings,thingVector ,resultArray  );
    cout << "Result backback in size = " << command.countOfThings << " is: " << endl;
    for(size_t i = 0; i < resultArray.size(); i++)
    {
        cout << "weight: " << resultArray[i].weight << " , price: " << resultArray[i].price << endl;
    }
    return 0;
}

void ParseCommandFile(Command &command, vector<Thing> &thingVector)
{
    ifstream in("config.txt");
    if (in.is_open())
    {
        in >> command.numberOfThings >> command.countOfThings >> command.priceOfThings;
        Thing thing;
        thingVector.push_back({0,0}); // –ö–û–°–¢–´–õ–¨ –ø–æ–±–æ—Ä–æ—Ç—å —á—Ç–µ–Ω–∏–µ —Å 1 —ç–ª–µ–º–µ–Ω—Ç–∞
        while (!in.eof())
        {
            in >> thing.weight >> thing.price;
            thingVector.push_back(thing);
        }
    }
}

void GetResultItems(vector<vector<size_t>>& array, size_t k, size_t s, vector<Thing>& w, vector<Thing>& resultArray)
{
    if (array[k][s] == 0)
        return;
    if (array[k - 1][s] == array[k][s])
        GetResultItems(array, k - 1, s, w, resultArray);
    else
    {
        GetResultItems(array, k - 1, s - w[k].weight, w, resultArray);
        resultArray.push_back({w[k].weight,w[k].price});     
    }         
}