#include <iostream>
#include <vector>
#include <cstring>
#include <fstream>
#include <string>
// /*
// 4.2. [# 50] ะะฐะดะฐะฝ ะดะฒัะดะพะปัะฝัะน ะณัะฐั ๐บ = ๐บ(๐, ๐ธ, ๐), ะณะดะต ๐, ๐ โ ะผะฝะพะถะตััะฒะพ ะฒะตััะธะฝ, |๐| = |๐| = ๐; ๐ธ โ ะผะฝะพะถะตััะฒะพ ัะตะฑะตั.
// ะ ะทะฐะดะฐะฝะฝะพะผ ะดะฒัะดะพะปัะฝะพะผ ะณัะฐัะต ะฝะฐะนัะธ ะฟะพะปะฝะพะต ะฟะฐัะพัะพัะตัะฐะฝะธะต, ะฒะพัะฟะพะปัะทะพะฒะฐะฒัะธัั ะฐะปะณะพัะธัะผะพะผ ะัะฝะฐ.
// ะัะพะด. ะะฒัะดะพะปัะฝัะน ะณัะฐั ๐บ = ๐บ(๐, ๐ธ, ๐) ะทะฐะดะฐะตััั ะผะฐััะธัะตะน ๐ด[1. . ๐, 1. . ๐], ๐ = |๐|, ๐ =
// |๐|, ะฒ ะบะพัะพัะพะน ๐ด[๐ฅ, ๐ฆ] = 1, ะตัะปะธ ะตััั ัะตะฑัะพ (๐ฅ, ๐ฆ) ะธ ๐ด[๐ฅ, ๐ฆ] = 0, ะตัะปะธ ัะฐะบะพะณะพ ัะตะฑัะฐ ะฝะตั.
// ะะตัะฒะฐั ัััะพะบะฐ ะฒัะพะดะฝะพะณะพ ัะฐะนะปะฐ ัะพะดะตัะถะธั ะดะฒะฐ ัะธัะปะฐ ๐, ๐ (1 โค ๐, ๐ โค 100) โ ะบะพะปะธัะตััะฒะพ
// ะฒะตััะธะฝ ะฒ ะบะฐะถะดะพะน ะดะพะปะต. ะ ะฟะพัะปะตะดัััะธั ๐ ัััะพะบะฐั ัะพะดะตัะถะฐััั ะฟะพ ๐ ัะธัะตะป ะผะฐััะธัั ๐ด.
// ะะตััะธะฝั ะฒ ะบะฐะถะดะพะน ะดะพะปะต ะฟัะพะฝัะผะตัะพะฒะฐะฝั ะพั 1.
// ะััะพะด. ะ ะฟะตัะฒะพะน ัััะพัะบะต Yes ะปะธะฑะพ No, ะฒ ะทะฐะฒะธัะธะผะพััะธ ะพั ัะพะณะพ ะตััั ะผะฐะบัะธะผะฐะปัะฝะพะต
// ะฟะฐัะพัะพัะตัะฐะฝะธะต ะธะปะธ ะฝะตั. ะะพ ะฒัะพัะพะผ ัะปััะฐะต, ัะปะตะดัััะธั ๐ ัััะพัะบะฐั ะฟะพ ะดะฒะฐ ัะธัะปะฐ โ
// ะฒะตััะธะฝั, ัะพะตะดะธะฝะตะฝะฝัะต ัะตะฑัะพะผ (ะฟะตัะฒะพะต ัะธัะปะพ โ ะฟะตัะฒะฐั ะดะพะปั, ะฒัะพัะพะต โ ะฒัะพัะฐั).
// */
using namespace std;

bool dfs(int v, vector<bool>& visited, vector<int>& match, const vector<vector<int>>& graph)
{
    if (visited[v])
    {
        return false;
    }
    visited[v] = true;

    for (size_t i = 0; i < graph[v].size(); i++)
    {
        int to = graph[v][i];
        if (match[to] == -1 || dfs(match[to], visited, match, graph))
        {
            match[to] = v;
            return true;
        }
    }
    return false;
}

void ParseTextFile(ifstream& in, vector<vector<int>>& graph, size_t size)
{
    for (int i = 0; i < size; i++)
    {
        for (int j = 0; j < size; j++)
        {
            in >> graph[i][j];
        }
    }
    in.close();
}

vector<int> FindCompleteMatching(vector<vector<int>>& arr, int size)
{
    vector<vector<int>> ribsList(size);
    for (int i = 0; i < size; ++i)
    {
        for (int j = 0; j < size; ++j)
        {
            if (arr[i][j] == 1)
            {
                ribsList[i].push_back(j);
            }
        }
    }

    vector<int> matchingList(size, -1);
    vector<bool> used;

    for (int v = 0; v < size; ++v)
    {
        used.assign(size, false);
        dfs(v, used, matchingList, ribsList);
    }

    return matchingList;
}

int main()
{
    string fileName = "test.txt";
    ifstream input(fileName);
    if (!input.is_open())
    {
        cout << "File not found";
        return 1;
    }
    int matrixSize, rowSize;
    input >> matrixSize >> rowSize;

    vector<vector<int>> graph(matrixSize, vector<int>(matrixSize, 0));
    ParseTextFile(input, graph, matrixSize);

    vector<int> match = FindCompleteMatching(graph, matrixSize);

    if (find(match.begin(), match.end(), -1) != match.end())
    {
        cout << "No" << endl;
    }
    else
    {
        cout << "Yes" << endl;
        for (int i = 0; i < graph.size(); ++i)
        {
            cout << match[i] + 1 << ", " << i + 1 << endl;
        }
    }

    return 0;
}