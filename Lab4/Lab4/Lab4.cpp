#include <iostream>
#include <vector>
#include <cstring>
#include <fstream>
#include <string>
// /*
// 4.2. [# 50] ะะฐะดะฐะฝ ะดะฒัะดะพะปัะฝัะน ะณัะฐั ๐บ = ๐บ(๐, ๐ธ, ๐), ะณะดะต ๐, ๐ โ ะผะฝะพะถะตััะฒะพ ะฒะตััะธะฝ, |๐| = |๐| = ๐; ๐ธ โ ะผะฝะพะถะตััะฒะพ ัะตะฑะตั.
// ะ ะทะฐะดะฐะฝะฝะพะผ ะดะฒัะดะพะปัะฝะพะผ ะณัะฐัะต ะฝะฐะนัะธ ะฟะพะปะฝะพะต ะฟะฐัะพัะพัะตัะฐะฝะธะต, ะฒะพัะฟะพะปัะทะพะฒะฐะฒัะธัั ะฐะปะณะพัะธัะผะพะผ ะัะฝะฐ.
// ะัะพะด. ะะฒัะดะพะปัะฝัะน ะณัะฐั ๐บ = ๐บ(๐, ๐ธ, ๐) ะทะฐะดะฐะตััั ะผะฐััะธัะตะน ๐ด[1. . ๐, 1. . ๐], ๐ = |๐|, ๐ =
// |๐|, ะฒ ะบะพัะพัะพะน ๐ด[๐ฅ, ๐ฆ] = 1, ะตัะปะธ ะตััั ัะตะฑัะพ (๐ฅ, ๐ฆ) ะธ ๐ด[๐ฅ, ๐ฆ] = 0, ะตัะปะธ ัะฐะบะพะณะพ ัะตะฑัะฐ ะฝะตั.
// ะะตัะฒะฐั ัััะพะบะฐ ะฒัะพะดะฝะพะณะพ ัะฐะนะปะฐ ัะพะดะตัะถะธั ะดะฒะฐ ัะธัะปะฐ ๐, ๐ (1 โค ๐, ๐ โค 100) โ ะบะพะปะธัะตััะฒะพ
// ะฒะตััะธะฝ ะฒ ะบะฐะถะดะพะน ะดะพะปะต. ะ ะฟะพัะปะตะดัััะธั ๐ ัััะพะบะฐั ัะพะดะตัะถะฐััั ะฟะพ ๐ ัะธัะตะป ะผะฐััะธัั ๐ด.
// ะะตััะธะฝั ะฒ ะบะฐะถะดะพะน ะดะพะปะต ะฟัะพะฝัะผะตัะพะฒะฐะฝั ะพั 1.
// ะััะพะด. ะ ะฟะตัะฒะพะน ัััะพัะบะต Yes ะปะธะฑะพ No, ะฒ ะทะฐะฒะธัะธะผะพััะธ ะพั ัะพะณะพ ะตััั ะผะฐะบัะธะผะฐะปัะฝะพะต
// ะฟะฐัะพัะพัะตัะฐะฝะธะต ะธะปะธ ะฝะตั. ะะพ ะฒัะพัะพะผ ัะปััะฐะต, ัะปะตะดัััะธั ๐ ัััะพัะบะฐั ะฟะพ ะดะฒะฐ ัะธัะปะฐ โ
// ะฒะตััะธะฝั, ัะพะตะดะธะฝะตะฝะฝัะต ัะตะฑัะพะผ (ะฟะตัะฒะพะต ัะธัะปะพ โ ะฟะตัะฒะฐั ะดะพะปั, ะฒัะพัะพะต โ ะฒัะพัะฐั).
// */
using namespace std;
/**
 * @param v -
 * @param visited -
 * @param graph -
 * @param match -
 */
bool dfs(int v, vector<bool>& visited, const vector<vector<int>>& graph, vector<int>& match)
{
    if (visited[v])
    {
        return false;
    }
    visited[v] = true;

    for (size_t i = 0; i < graph[v].size(); i++)
    {
        int to = graph[v][i];
        //ะตัะปะธ -1 ัะพ ะตัะต ะฝะต ะดะพะฑะฐะฒะปะตะฝะฐ
        if (match[to] == -1 || dfs(match[to], visited, graph, match))
        {
            match[to] = v;
            return true;
        }
    }
    return false;
}

vector<vector<int>> ParseTextFile(string fileName)
{
    int p, q;
    string line;
    ifstream in(fileName);
    if (!in.is_open())
    {
        throw exception("file not found!");
    }
    in >> p >> q;
    vector<vector<int>> graph(p, vector<int>(q));

    for (int i = 0; i < p; i++)
    {
        for (int j = 0; j < q; j++)
        {
            in >> graph[i][j];
        }
    }
    in.close();
    return graph;
}

int main()
{
    string fileName = "test.txt";
    vector<vector<int>> graph = ParseTextFile(fileName);
    vector<int> match(graph.at(0).size(), -1);

    for (int v = 0; v < static_cast<int>(graph.size()); ++v)
    {
        vector<bool> visited(graph.size(), false);
        dfs(v, visited, graph, match);
    }

    if (find(match.begin(), match.end(), -1) != match.end()) {
        cout << "No" << endl;
    }
    else {
        cout << "Yes" << endl;
        for (int i = 0; i < graph.size(); ++i)
        {
            cout << match[i] << ", " << i << endl;
        }
    }

    return 0;
}